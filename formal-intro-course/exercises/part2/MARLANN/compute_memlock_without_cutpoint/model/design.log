
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+932 (git sha1 4072a966, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: compute.v
Parsing formal Verilog input from `compute.v' to AST representation.
Generating RTLIL representation for module `\marlann_compute'.
Generating RTLIL representation for module `\marlann_compute_mul2'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \marlann_compute
Used module:     \marlann_compute_mul2

2.1.2. Analyzing design hierarchy..
Top module:  \marlann_compute
Used module:     \marlann_compute_mul2
Removed 0 unused modules.
Module marlann_compute directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$compute.v:529$200 in module marlann_compute.
Marked 2 switch rules as full_case in process $proc$compute.v:473$174 in module marlann_compute.
Marked 1 switch rules as full_case in process $proc$compute.v:457$163 in module marlann_compute.
Marked 3 switch rules as full_case in process $proc$compute.v:146$17 in module marlann_compute.
Marked 2 switch rules as full_case in process $proc$compute.v:119$14 in module marlann_compute.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 49 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\marlann_compute.$proc$compute.v:182$235'.
  Set init value: \init_cycle = 1'1

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\marlann_compute_mul2.$proc$compute.v:701$236'.
Creating decoders for process `\marlann_compute.$proc$compute.v:182$235'.
Creating decoders for process `\marlann_compute.$proc$compute.v:543$205'.
     1/3: $0\pre_mem_wr_wdata[63:0]
     2/3: $0\pre_mem_wr_en[7:0]
     3/3: $0\SBP[16:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:529$200'.
     1/3: $1\mem_wr_wdata[63:0]
     2/3: $1\mem_wr_addr[15:0]
     3/3: $1\mem_wr_en[7:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:473$174'.
     1/5: $0\acc1_saturated[7:0]
     2/5: $0\acc0_saturated[7:0]
     3/5: $0\s10_en[0:0]
     4/5: $0\acc1[31:0]
     5/5: $0\acc0[31:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:457$163'.
     1/1: $1\new_acc0_max[31:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:419$139'.
     1/1: $0\s9_en[0:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:414$136'.
Creating decoders for process `\marlann_compute.$proc$compute.v:397$129'.
     1/1: $0\s8_en[0:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:371$118'.
     1/1: $0\s7_en[0:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:319$85'.
     1/13: $0\mem_rd1_addr[15:0]
     2/13: $0\mem_rd1_en[0:0]
     3/13: $0\s6_en[0:0]
     4/13: $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88
     5/13: $0$memwr$\code_mem$compute.v:341$4_DATA[31:0]$87
     6/13: $0$memwr$\code_mem$compute.v:341$4_ADDR[8:0]$86
     7/13: $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91
     8/13: $0$memwr$\coeff_mem$compute.v:346$5_DATA[127:0]$90
     9/13: $0$memwr$\coeff_mem$compute.v:346$5_ADDR[8:0]$89
    10/13: $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94
    11/13: $0$memwr$\coeff_mem$compute.v:351$6_DATA[127:0]$93
    12/13: $0$memwr$\coeff_mem$compute.v:351$6_ADDR[8:0]$92
    13/13: $0\LBP[16:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:301$74'.
     1/2: $0\s5_en[0:0]
     2/2: $0\CBP[8:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:289$71'.
     1/1: $0\s4_en[0:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:277$68'.
     1/1: $0\s3_en[0:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:238$55'.
     1/5: $0\mem_rd0_addr[15:0]
     2/5: $0\mem_rd0_en[0:0]
     3/5: $0\s2_tick_simd[0:0]
     4/5: $0\s2_en[0:0]
     5/5: $0\VBP[16:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:220$50'.
     1/4: $0\s1_insn_sel[0:0]
     2/4: $0\s1_insn_codemem[31:0]
     3/4: $0\s1_insn_direct[31:0]
     4/4: $0\s1_en[0:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:196$36'.
     1/4: $0$formal$compute.v:200$2_EN[0:0]$38
     2/4: $0$formal$compute.v:200$2_CHECK[0:0]$37
     3/4: $0$formal$compute.v:202$3_EN[0:0]$40
     4/4: $0$formal$compute.v:202$3_CHECK[0:0]$39
Creating decoders for process `\marlann_compute.$proc$compute.v:188$33'.
     1/2: $0$formal$compute.v:190$1_EN[0:0]$35
     2/2: $0$formal$compute.v:190$1_CHECK[0:0]$34
Creating decoders for process `\marlann_compute.$proc$compute.v:184$32'.
Creating decoders for process `\marlann_compute.$proc$compute.v:166$25'.
     1/3: $0\memlock_res[9:0]
     2/3: $0\memlock_expect[0:0]
     3/3: $0\maxlock_a_q[0:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:146$17'.
     1/4: $2\maxlock_b[0:0]
     2/4: $2\maxlock_a[0:0]
     3/4: $1\maxlock_b[0:0]
     4/4: $1\maxlock_a[0:0]
Creating decoders for process `\marlann_compute.$proc$compute.v:119$14'.
     1/2: $2\memlock_mask[9:0]
     2/2: $1\memlock_mask[9:0]

2.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\marlann_compute.\mem_wr_en' from process `\marlann_compute.$proc$compute.v:529$200'.
No latch inferred for signal `\marlann_compute.\mem_wr_addr' from process `\marlann_compute.$proc$compute.v:529$200'.
No latch inferred for signal `\marlann_compute.\mem_wr_wdata' from process `\marlann_compute.$proc$compute.v:529$200'.
No latch inferred for signal `\marlann_compute.\new_acc0_add' from process `\marlann_compute.$proc$compute.v:457$163'.
No latch inferred for signal `\marlann_compute.\new_acc1_add' from process `\marlann_compute.$proc$compute.v:457$163'.
No latch inferred for signal `\marlann_compute.\new_acc0_max' from process `\marlann_compute.$proc$compute.v:457$163'.
No latch inferred for signal `\marlann_compute.\new_acc0' from process `\marlann_compute.$proc$compute.v:457$163'.
No latch inferred for signal `\marlann_compute.\new_acc1' from process `\marlann_compute.$proc$compute.v:457$163'.
No latch inferred for signal `\marlann_compute.\acc0zn' from process `\marlann_compute.$proc$compute.v:414$136'.
No latch inferred for signal `\marlann_compute.$formal$compute.v:200$2_CHECK' from process `\marlann_compute.$proc$compute.v:196$36'.
No latch inferred for signal `\marlann_compute.$formal$compute.v:200$2_EN' from process `\marlann_compute.$proc$compute.v:196$36'.
No latch inferred for signal `\marlann_compute.$formal$compute.v:202$3_CHECK' from process `\marlann_compute.$proc$compute.v:196$36'.
No latch inferred for signal `\marlann_compute.$formal$compute.v:202$3_EN' from process `\marlann_compute.$proc$compute.v:196$36'.
No latch inferred for signal `\marlann_compute.$formal$compute.v:190$1_CHECK' from process `\marlann_compute.$proc$compute.v:188$33'.
No latch inferred for signal `\marlann_compute.$formal$compute.v:190$1_EN' from process `\marlann_compute.$proc$compute.v:188$33'.
No latch inferred for signal `\marlann_compute.\maxlock_a' from process `\marlann_compute.$proc$compute.v:146$17'.
No latch inferred for signal `\marlann_compute.\maxlock_b' from process `\marlann_compute.$proc$compute.v:146$17'.
No latch inferred for signal `\marlann_compute.\memlock_mask' from process `\marlann_compute.$proc$compute.v:119$14'.

2.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\marlann_compute_mul2.\r1A' using process `\marlann_compute_mul2.$proc$compute.v:701$236'.
  created $dff cell `$procdff$463' with positive edge clock.
Creating register for signal `\marlann_compute_mul2.\r2A' using process `\marlann_compute_mul2.$proc$compute.v:701$236'.
  created $dff cell `$procdff$464' with positive edge clock.
Creating register for signal `\marlann_compute_mul2.\r3A' using process `\marlann_compute_mul2.$proc$compute.v:701$236'.
  created $dff cell `$procdff$465' with positive edge clock.
Creating register for signal `\marlann_compute_mul2.\r1B' using process `\marlann_compute_mul2.$proc$compute.v:701$236'.
  created $dff cell `$procdff$466' with positive edge clock.
Creating register for signal `\marlann_compute_mul2.\r2B' using process `\marlann_compute_mul2.$proc$compute.v:701$236'.
  created $dff cell `$procdff$467' with positive edge clock.
Creating register for signal `\marlann_compute_mul2.\r3B' using process `\marlann_compute_mul2.$proc$compute.v:701$236'.
  created $dff cell `$procdff$468' with positive edge clock.
Creating register for signal `\marlann_compute.\SBP' using process `\marlann_compute.$proc$compute.v:543$205'.
  created $dff cell `$procdff$469' with positive edge clock.
Creating register for signal `\marlann_compute.\pre_mem_wr_en' using process `\marlann_compute.$proc$compute.v:543$205'.
  created $dff cell `$procdff$470' with positive edge clock.
Creating register for signal `\marlann_compute.\pre_mem_wr_addr' using process `\marlann_compute.$proc$compute.v:543$205'.
  created $dff cell `$procdff$471' with positive edge clock.
Creating register for signal `\marlann_compute.\pre_mem_wr_wdata' using process `\marlann_compute.$proc$compute.v:543$205'.
  created $dff cell `$procdff$472' with positive edge clock.
Creating register for signal `\marlann_compute.\acc0' using process `\marlann_compute.$proc$compute.v:473$174'.
  created $dff cell `$procdff$473' with positive edge clock.
Creating register for signal `\marlann_compute.\acc1' using process `\marlann_compute.$proc$compute.v:473$174'.
  created $dff cell `$procdff$474' with positive edge clock.
Creating register for signal `\marlann_compute.\s10_en' using process `\marlann_compute.$proc$compute.v:473$174'.
  created $dff cell `$procdff$475' with positive edge clock.
Creating register for signal `\marlann_compute.\s10_insn' using process `\marlann_compute.$proc$compute.v:473$174'.
  created $dff cell `$procdff$476' with positive edge clock.
Creating register for signal `\marlann_compute.\acc0_saturated' using process `\marlann_compute.$proc$compute.v:473$174'.
  created $dff cell `$procdff$477' with positive edge clock.
Creating register for signal `\marlann_compute.\acc1_saturated' using process `\marlann_compute.$proc$compute.v:473$174'.
  created $dff cell `$procdff$478' with positive edge clock.
Creating register for signal `\marlann_compute.\s9_en' using process `\marlann_compute.$proc$compute.v:419$139'.
  created $dff cell `$procdff$479' with positive edge clock.
Creating register for signal `\marlann_compute.\s9_insn' using process `\marlann_compute.$proc$compute.v:419$139'.
  created $dff cell `$procdff$480' with positive edge clock.
Creating register for signal `\marlann_compute.\s9_sum0' using process `\marlann_compute.$proc$compute.v:419$139'.
  created $dff cell `$procdff$481' with positive edge clock.
Creating register for signal `\marlann_compute.\s9_sum1' using process `\marlann_compute.$proc$compute.v:419$139'.
  created $dff cell `$procdff$482' with positive edge clock.
Creating register for signal `\marlann_compute.\s9_max' using process `\marlann_compute.$proc$compute.v:419$139'.
  created $dff cell `$procdff$483' with positive edge clock.
Creating register for signal `\marlann_compute.\s9_maxen' using process `\marlann_compute.$proc$compute.v:419$139'.
  created $dff cell `$procdff$484' with positive edge clock.
Creating register for signal `\marlann_compute.\s8_en' using process `\marlann_compute.$proc$compute.v:397$129'.
  created $dff cell `$procdff$485' with positive edge clock.
Creating register for signal `\marlann_compute.\s8_insn' using process `\marlann_compute.$proc$compute.v:397$129'.
  created $dff cell `$procdff$486' with positive edge clock.
Creating register for signal `\marlann_compute.\s8_max' using process `\marlann_compute.$proc$compute.v:397$129'.
  created $dff cell `$procdff$487' with positive edge clock.
Creating register for signal `\marlann_compute.\s7_en' using process `\marlann_compute.$proc$compute.v:371$118'.
  created $dff cell `$procdff$488' with positive edge clock.
Creating register for signal `\marlann_compute.\s7_insn' using process `\marlann_compute.$proc$compute.v:371$118'.
  created $dff cell `$procdff$489' with positive edge clock.
Creating register for signal `\marlann_compute.\s7_max' using process `\marlann_compute.$proc$compute.v:371$118'.
  created $dff cell `$procdff$490' with positive edge clock.
Creating register for signal `\marlann_compute.\LBP' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$491' with positive edge clock.
Creating register for signal `\marlann_compute.\mem_rd1_en' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$492' with positive edge clock.
Creating register for signal `\marlann_compute.\mem_rd1_addr' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$493' with positive edge clock.
Creating register for signal `\marlann_compute.\s6_en' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$494' with positive edge clock.
Creating register for signal `\marlann_compute.\s6_insn' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$495' with positive edge clock.
Creating register for signal `\marlann_compute.\s6_max' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$496' with positive edge clock.
Creating register for signal `\marlann_compute.$memwr$\code_mem$compute.v:341$4_ADDR' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$497' with positive edge clock.
Creating register for signal `\marlann_compute.$memwr$\code_mem$compute.v:341$4_DATA' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$498' with positive edge clock.
Creating register for signal `\marlann_compute.$memwr$\code_mem$compute.v:341$4_EN' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$499' with positive edge clock.
Creating register for signal `\marlann_compute.$memwr$\coeff_mem$compute.v:346$5_ADDR' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$500' with positive edge clock.
Creating register for signal `\marlann_compute.$memwr$\coeff_mem$compute.v:346$5_DATA' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$501' with positive edge clock.
Creating register for signal `\marlann_compute.$memwr$\coeff_mem$compute.v:346$5_EN' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$502' with positive edge clock.
Creating register for signal `\marlann_compute.$memwr$\coeff_mem$compute.v:351$6_ADDR' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$503' with positive edge clock.
Creating register for signal `\marlann_compute.$memwr$\coeff_mem$compute.v:351$6_DATA' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$504' with positive edge clock.
Creating register for signal `\marlann_compute.$memwr$\coeff_mem$compute.v:351$6_EN' using process `\marlann_compute.$proc$compute.v:319$85'.
  created $dff cell `$procdff$505' with positive edge clock.
Creating register for signal `\marlann_compute.\CBP' using process `\marlann_compute.$proc$compute.v:301$74'.
  created $dff cell `$procdff$506' with positive edge clock.
Creating register for signal `\marlann_compute.\s5_en' using process `\marlann_compute.$proc$compute.v:301$74'.
  created $dff cell `$procdff$507' with positive edge clock.
Creating register for signal `\marlann_compute.\s5_insn' using process `\marlann_compute.$proc$compute.v:301$74'.
  created $dff cell `$procdff$508' with positive edge clock.
Creating register for signal `\marlann_compute.\s5_coeff' using process `\marlann_compute.$proc$compute.v:301$74'.
  created $dff cell `$procdff$509' with positive edge clock.
Creating register for signal `\marlann_compute.\s4_en' using process `\marlann_compute.$proc$compute.v:289$71'.
  created $dff cell `$procdff$510' with positive edge clock.
Creating register for signal `\marlann_compute.\s4_insn' using process `\marlann_compute.$proc$compute.v:289$71'.
  created $dff cell `$procdff$511' with positive edge clock.
Creating register for signal `\marlann_compute.\s3_en' using process `\marlann_compute.$proc$compute.v:277$68'.
  created $dff cell `$procdff$512' with positive edge clock.
Creating register for signal `\marlann_compute.\s3_insn' using process `\marlann_compute.$proc$compute.v:277$68'.
  created $dff cell `$procdff$513' with positive edge clock.
Creating register for signal `\marlann_compute.\VBP' using process `\marlann_compute.$proc$compute.v:238$55'.
  created $dff cell `$procdff$514' with positive edge clock.
Creating register for signal `\marlann_compute.\mem_rd0_en' using process `\marlann_compute.$proc$compute.v:238$55'.
  created $dff cell `$procdff$515' with positive edge clock.
Creating register for signal `\marlann_compute.\mem_rd0_addr' using process `\marlann_compute.$proc$compute.v:238$55'.
  created $dff cell `$procdff$516' with positive edge clock.
Creating register for signal `\marlann_compute.\s2_en' using process `\marlann_compute.$proc$compute.v:238$55'.
  created $dff cell `$procdff$517' with positive edge clock.
Creating register for signal `\marlann_compute.\s2_insn' using process `\marlann_compute.$proc$compute.v:238$55'.
  created $dff cell `$procdff$518' with positive edge clock.
Creating register for signal `\marlann_compute.\s2_tick_simd' using process `\marlann_compute.$proc$compute.v:238$55'.
  created $dff cell `$procdff$519' with positive edge clock.
Creating register for signal `\marlann_compute.\s1_en' using process `\marlann_compute.$proc$compute.v:220$50'.
  created $dff cell `$procdff$520' with positive edge clock.
Creating register for signal `\marlann_compute.\s1_insn_direct' using process `\marlann_compute.$proc$compute.v:220$50'.
  created $dff cell `$procdff$521' with positive edge clock.
Creating register for signal `\marlann_compute.\s1_insn_codemem' using process `\marlann_compute.$proc$compute.v:220$50'.
  created $dff cell `$procdff$522' with positive edge clock.
Creating register for signal `\marlann_compute.\s1_insn_sel' using process `\marlann_compute.$proc$compute.v:220$50'.
  created $dff cell `$procdff$523' with positive edge clock.
Creating register for signal `\marlann_compute.\init_cycle' using process `\marlann_compute.$proc$compute.v:184$32'.
  created $dff cell `$procdff$524' with positive edge clock.
Creating register for signal `\marlann_compute.\memlock_res' using process `\marlann_compute.$proc$compute.v:166$25'.
  created $dff cell `$procdff$525' with positive edge clock.
Creating register for signal `\marlann_compute.\memlock_expect' using process `\marlann_compute.$proc$compute.v:166$25'.
  created $dff cell `$procdff$526' with positive edge clock.
Creating register for signal `\marlann_compute.\maxlock_a_q' using process `\marlann_compute.$proc$compute.v:166$25'.
  created $dff cell `$procdff$527' with positive edge clock.

2.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `marlann_compute_mul2.$proc$compute.v:701$236'.
Removing empty process `marlann_compute.$proc$compute.v:182$235'.
Found and cleaned up 5 empty switches in `\marlann_compute.$proc$compute.v:543$205'.
Removing empty process `marlann_compute.$proc$compute.v:543$205'.
Found and cleaned up 1 empty switch in `\marlann_compute.$proc$compute.v:529$200'.
Removing empty process `marlann_compute.$proc$compute.v:529$200'.
Found and cleaned up 8 empty switches in `\marlann_compute.$proc$compute.v:473$174'.
Removing empty process `marlann_compute.$proc$compute.v:473$174'.
Found and cleaned up 1 empty switch in `\marlann_compute.$proc$compute.v:457$163'.
Removing empty process `marlann_compute.$proc$compute.v:457$163'.
Found and cleaned up 1 empty switch in `\marlann_compute.$proc$compute.v:419$139'.
Removing empty process `marlann_compute.$proc$compute.v:419$139'.
Removing empty process `marlann_compute.$proc$compute.v:414$136'.
Found and cleaned up 1 empty switch in `\marlann_compute.$proc$compute.v:397$129'.
Removing empty process `marlann_compute.$proc$compute.v:397$129'.
Found and cleaned up 1 empty switch in `\marlann_compute.$proc$compute.v:371$118'.
Removing empty process `marlann_compute.$proc$compute.v:371$118'.
Found and cleaned up 2 empty switches in `\marlann_compute.$proc$compute.v:319$85'.
Removing empty process `marlann_compute.$proc$compute.v:319$85'.
Found and cleaned up 2 empty switches in `\marlann_compute.$proc$compute.v:301$74'.
Removing empty process `marlann_compute.$proc$compute.v:301$74'.
Found and cleaned up 1 empty switch in `\marlann_compute.$proc$compute.v:289$71'.
Removing empty process `marlann_compute.$proc$compute.v:289$71'.
Found and cleaned up 1 empty switch in `\marlann_compute.$proc$compute.v:277$68'.
Removing empty process `marlann_compute.$proc$compute.v:277$68'.
Found and cleaned up 2 empty switches in `\marlann_compute.$proc$compute.v:238$55'.
Removing empty process `marlann_compute.$proc$compute.v:238$55'.
Found and cleaned up 2 empty switches in `\marlann_compute.$proc$compute.v:220$50'.
Removing empty process `marlann_compute.$proc$compute.v:220$50'.
Found and cleaned up 3 empty switches in `\marlann_compute.$proc$compute.v:196$36'.
Removing empty process `marlann_compute.$proc$compute.v:196$36'.
Found and cleaned up 1 empty switch in `\marlann_compute.$proc$compute.v:188$33'.
Removing empty process `marlann_compute.$proc$compute.v:188$33'.
Removing empty process `marlann_compute.$proc$compute.v:184$32'.
Found and cleaned up 1 empty switch in `\marlann_compute.$proc$compute.v:166$25'.
Removing empty process `marlann_compute.$proc$compute.v:166$25'.
Found and cleaned up 3 empty switches in `\marlann_compute.$proc$compute.v:146$17'.
Removing empty process `marlann_compute.$proc$compute.v:146$17'.
Found and cleaned up 2 empty switches in `\marlann_compute.$proc$compute.v:119$14'.
Removing empty process `marlann_compute.$proc$compute.v:119$14'.
Cleaned up 38 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module marlann_compute_mul2.
Optimizing module marlann_compute.
<suppressed ~16 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \marlann_compute_mul2..
Finding unused cells or wires in module \marlann_compute..
Removed 4 unused cells and 220 unused wires.
<suppressed ~15 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module marlann_compute..
checking module marlann_compute_mul2..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module marlann_compute.
Optimizing module marlann_compute_mul2.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\marlann_compute'.
<suppressed ~180 debug messages>
Finding identical cells in module `\marlann_compute_mul2'.
Removed a total of 60 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \marlann_compute..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \marlann_compute_mul2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~75 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \marlann_compute.
    New input vector for $reduce_or cell $reduce_or$compute.v:62$11: { \mem_wr_en [0] \mem_wr_en [1] \mem_wr_en [2] \mem_wr_en [3] \mem_wr_en [4] \mem_wr_en [5] \mem_wr_en [6] \mem_wr_en [7] }
    New input vector for $reduce_or cell $reduce_or$compute.v:516$197: { \acc1_shifted [7] \acc1_shifted [8] \acc1_shifted [9] \acc1_shifted [10] \acc1_shifted [11] \acc1_shifted [12] \acc1_shifted [13] \acc1_shifted [14] \acc1_shifted [15] \acc1_shifted [16] \acc1_shifted [17] \acc1_shifted [18] \acc1_shifted [19] \acc1_shifted [20] \acc1_shifted [21] \acc1_shifted [22] \acc1_shifted [23] \acc1_shifted [24] \acc1_shifted [25] \acc1_shifted [26] \acc1_shifted [27] \acc1_shifted [28] \acc1_shifted [29] \acc1_shifted [30] \acc1_shifted [31] }
    New input vector for $reduce_or cell $reduce_or$compute.v:511$193: { \acc0_shifted [7] \acc0_shifted [8] \acc0_shifted [9] \acc0_shifted [10] \acc0_shifted [11] \acc0_shifted [12] \acc0_shifted [13] \acc0_shifted [14] \acc0_shifted [15] \acc0_shifted [16] \acc0_shifted [17] \acc0_shifted [18] \acc0_shifted [19] \acc0_shifted [20] \acc0_shifted [21] \acc0_shifted [22] \acc0_shifted [23] \acc0_shifted [24] \acc0_shifted [25] \acc0_shifted [26] \acc0_shifted [27] \acc0_shifted [28] \acc0_shifted [29] \acc0_shifted [30] \acc0_shifted [31] }
    New input vector for $reduce_or cell $reduce_or$compute.v:164$22: { $and$compute.v:164$21_Y [0] $and$compute.v:164$21_Y [1] $and$compute.v:164$21_Y [2] $and$compute.v:164$21_Y [3] $and$compute.v:164$21_Y [4] $and$compute.v:164$21_Y [5] $and$compute.v:164$21_Y [6] $and$compute.v:164$21_Y [7] $and$compute.v:164$21_Y [8] $and$compute.v:164$21_Y [9] }
    New input vector for $reduce_or cell $procmux$461_ANY: { $procmux$461_CMP [0] $procmux$461_CMP [1] $procmux$461_CMP [2] $procmux$461_CMP [3] $procmux$461_CMP [4] $procmux$461_CMP [5] }
    New input vector for $reduce_or cell $procmux$459_ANY: { $procmux$459_CMP [0] $procmux$459_CMP [1] $procmux$459_CMP [2] $procmux$459_CMP [3] $procmux$459_CMP [4] $procmux$459_CMP [5] $procmux$459_CMP [6] $procmux$459_CMP [7] $procmux$459_CMP [8] }
    New input vector for $reduce_or cell $procmux$453_ANY: { $procmux$453_CMP [0] $procmux$453_CMP [1] $procmux$453_CMP [2] $procmux$453_CMP [3] }
    New input vector for $reduce_or cell $procmux$450_ANY: { $procmux$386_CMP [1] $procmux$386_CMP [3] $procmux$386_CMP [4] $procmux$450_CMP [3] }
    New input vector for $reduce_or cell $procmux$403_ANY: { $procmux$403_CMP [0] $procmux$403_CMP [1] }
    New input vector for $reduce_or cell $procmux$387_ANY: { $procmux$387_CMP [0] $procmux$387_CMP [1] $procmux$387_CMP [2] }
    New input vector for $reduce_or cell $procmux$386_ANY: { $procmux$386_CMP [0] $procmux$386_CMP [1] $procmux$386_CMP [2] $procmux$386_CMP [3] $procmux$386_CMP [4] }
    New input vector for $reduce_or cell $procmux$372_ANY: { $procmux$372_CMP [0] $procmux$372_CMP [1] }
    New input vector for $reduce_or cell $procmux$298_ANY: { $procmux$298_CMP [0] $procmux$298_CMP [1] $procmux$298_CMP [2] $procmux$298_CMP [3] $procmux$298_CMP [4] $procmux$298_CMP [5] }
    New input vector for $reduce_and cell $reduce_and$compute.v:516$196: { \acc1_shifted [7] \acc1_shifted [8] \acc1_shifted [9] \acc1_shifted [10] \acc1_shifted [11] \acc1_shifted [12] \acc1_shifted [13] \acc1_shifted [14] \acc1_shifted [15] \acc1_shifted [16] \acc1_shifted [17] \acc1_shifted [18] \acc1_shifted [19] \acc1_shifted [20] \acc1_shifted [21] \acc1_shifted [22] \acc1_shifted [23] \acc1_shifted [24] \acc1_shifted [25] \acc1_shifted [26] \acc1_shifted [27] \acc1_shifted [28] \acc1_shifted [29] \acc1_shifted [30] \acc1_shifted [31] }
    New input vector for $reduce_and cell $reduce_and$compute.v:511$192: { \acc0_shifted [7] \acc0_shifted [8] \acc0_shifted [9] \acc0_shifted [10] \acc0_shifted [11] \acc0_shifted [12] \acc0_shifted [13] \acc0_shifted [14] \acc0_shifted [15] \acc0_shifted [16] \acc0_shifted [17] \acc0_shifted [18] \acc0_shifted [19] \acc0_shifted [20] \acc0_shifted [21] \acc0_shifted [22] \acc0_shifted [23] \acc0_shifted [24] \acc0_shifted [25] \acc0_shifted [26] \acc0_shifted [27] \acc0_shifted [28] \acc0_shifted [29] \acc0_shifted [30] \acc0_shifted [31] }
    Consolidated identical input bits for $mux cell $procmux$311:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$311_Y
      New ports: A=1'0, B=1'1, Y=$procmux$311_Y [0]
      New connections: $procmux$311_Y [31:1] = { $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] $procmux$311_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$334:
      Old ports: A=128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, B=128'00000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111, Y=$procmux$334_Y
      New ports: A=1'0, B=1'1, Y=$procmux$334_Y [0]
      New connections: $procmux$334_Y [127:1] = { 64'0000000000000000000000000000000000000000000000000000000000000000 $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] $procmux$334_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$354:
      Old ports: A=128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, B=128'11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000, Y=$procmux$354_Y
      New ports: A=1'0, B=1'1, Y=$procmux$354_Y [64]
      New connections: { $procmux$354_Y [127:65] $procmux$354_Y [63:0] } = { $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] $procmux$354_Y [64] 64'0000000000000000000000000000000000000000000000000000000000000000 }
    New ctrl vector for $pmux cell $procmux$390: $auto$opt_reduce.cc:132:opt_mux$529
    New ctrl vector for $pmux cell $procmux$458: { $procmux$461_CTRL $auto$opt_reduce.cc:132:opt_mux$531 $procmux$459_CTRL }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$528: { $procmux$386_CMP [0] $procmux$386_CMP [1] $procmux$386_CMP [2] $procmux$386_CMP [3] $procmux$386_CMP [4] $procmux$387_CMP [0] $procmux$387_CMP [1] $procmux$387_CMP [2] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$530: { $procmux$386_CMP [0] $procmux$386_CMP [1] $procmux$386_CMP [2] $procmux$386_CMP [3] $procmux$386_CMP [4] $procmux$387_CMP [0] $procmux$387_CMP [1] $procmux$387_CMP [2] }
  Optimizing cells in module \marlann_compute.
    Consolidated identical input bits for $mux cell $procmux$313:
      Old ports: A=0, B=$procmux$311_Y, Y=$0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88
      New ports: A=1'0, B=$procmux$311_Y [0], Y=$0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0]
      New connections: $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [31:1] = { $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] $0$memwr$\code_mem$compute.v:341$4_EN[31:0]$88 [0] }
    Consolidated identical input bits for $mux cell $procmux$336:
      Old ports: A=128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, B=$procmux$334_Y, Y=$0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91
      New ports: A=1'0, B=$procmux$334_Y [0], Y=$0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0]
      New connections: $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [127:1] = { 64'0000000000000000000000000000000000000000000000000000000000000000 $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] $0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91 [0] }
    Consolidated identical input bits for $mux cell $procmux$356:
      Old ports: A=128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, B=$procmux$354_Y, Y=$0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94
      New ports: A=1'0, B=$procmux$354_Y [64], Y=$0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64]
      New connections: { $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [127:65] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [63:0] } = { $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] $0$memwr$\coeff_mem$compute.v:351$6_EN[127:0]$94 [64] 64'0000000000000000000000000000000000000000000000000000000000000000 }
  Optimizing cells in module \marlann_compute.
  Optimizing cells in module \marlann_compute_mul2.
Performed a total of 25 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\marlann_compute'.
<suppressed ~3 debug messages>
Finding identical cells in module `\marlann_compute_mul2'.
Removed a total of 1 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \marlann_compute..
Finding unused cells or wires in module \marlann_compute_mul2..
Removed 0 unused cells and 37 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module marlann_compute.
Optimizing module marlann_compute_mul2.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \marlann_compute..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \marlann_compute_mul2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~75 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \marlann_compute.
  Optimizing cells in module \marlann_compute_mul2.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\marlann_compute'.
Finding identical cells in module `\marlann_compute_mul2'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \marlann_compute..
Finding unused cells or wires in module \marlann_compute_mul2..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module marlann_compute.
Optimizing module marlann_compute_mul2.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 11) from port B of cell marlann_compute.$or$compute.v:167$27 ($or).
Removed top 1 bits (of 11) from port Y of cell marlann_compute.$or$compute.v:167$27 ($or).
Removed top 4 bits (of 6) from port B of cell marlann_compute.$eq$compute.v:225$54 ($eq).
Removed top 15 bits (of 32) from mux cell marlann_compute.$ternary$compute.v:258$62 ($mux).
Removed top 15 bits (of 32) from port B of cell marlann_compute.$add$compute.v:258$63 ($add).
Removed top 15 bits (of 32) from port Y of cell marlann_compute.$add$compute.v:258$63 ($add).
Removed top 2 bits (of 6) from port B of cell marlann_compute.$eq$compute.v:310$79 ($eq).
Removed top 2 bits (of 6) from port B of cell marlann_compute.$eq$compute.v:310$80 ($eq).
Removed top 23 bits (of 32) from mux cell marlann_compute.$ternary$compute.v:311$83 ($mux).
Removed top 23 bits (of 32) from port B of cell marlann_compute.$add$compute.v:311$84 ($add).
Removed top 23 bits (of 32) from port Y of cell marlann_compute.$add$compute.v:311$84 ($add).
Removed top 15 bits (of 32) from mux cell marlann_compute.$ternary$compute.v:356$114 ($mux).
Removed top 15 bits (of 32) from port B of cell marlann_compute.$add$compute.v:356$115 ($add).
Removed top 15 bits (of 32) from port Y of cell marlann_compute.$add$compute.v:356$115 ($add).
Removed top 4 bits (of 20) from port A of cell marlann_compute.$add$compute.v:423$140 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:423$140 ($add).
Removed top 3 bits (of 20) from port Y of cell marlann_compute.$add$compute.v:423$140 ($add).
Removed top 3 bits (of 20) from port A of cell marlann_compute.$add$compute.v:423$141 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:423$141 ($add).
Removed top 2 bits (of 20) from port Y of cell marlann_compute.$add$compute.v:423$141 ($add).
Removed top 2 bits (of 20) from port A of cell marlann_compute.$add$compute.v:423$142 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:423$142 ($add).
Removed top 1 bits (of 20) from port Y of cell marlann_compute.$add$compute.v:423$142 ($add).
Removed top 1 bits (of 20) from port A of cell marlann_compute.$add$compute.v:424$143 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:424$143 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:424$144 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:424$145 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:424$146 ($add).
Removed top 4 bits (of 20) from port A of cell marlann_compute.$add$compute.v:426$147 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:426$147 ($add).
Removed top 3 bits (of 20) from port Y of cell marlann_compute.$add$compute.v:426$147 ($add).
Removed top 3 bits (of 20) from port A of cell marlann_compute.$add$compute.v:426$148 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:426$148 ($add).
Removed top 2 bits (of 20) from port Y of cell marlann_compute.$add$compute.v:426$148 ($add).
Removed top 2 bits (of 20) from port A of cell marlann_compute.$add$compute.v:426$149 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:426$149 ($add).
Removed top 1 bits (of 20) from port Y of cell marlann_compute.$add$compute.v:426$149 ($add).
Removed top 1 bits (of 20) from port A of cell marlann_compute.$add$compute.v:427$150 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:427$150 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:427$151 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:427$152 ($add).
Removed top 4 bits (of 20) from port B of cell marlann_compute.$add$compute.v:427$153 ($add).
Removed top 23 bits (of 32) from port A of cell marlann_compute.$gt$compute.v:430$156 ($gt).
Removed top 23 bits (of 32) from port A of cell marlann_compute.$gt$compute.v:430$157 ($gt).
Removed top 12 bits (of 32) from port B of cell marlann_compute.$add$compute.v:463$168 ($add).
Removed top 12 bits (of 32) from port B of cell marlann_compute.$add$compute.v:464$169 ($add).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$eq$compute.v:491$178 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$eq$compute.v:491$179 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$eq$compute.v:496$182 ($eq).
Removed top 24 bits (of 32) from mux cell marlann_compute.$ternary$compute.v:514$195 ($mux).
Removed top 24 bits (of 32) from mux cell marlann_compute.$ternary$compute.v:519$199 ($mux).
Removed top 1 bits (of 3) from port B of cell marlann_compute.$eq$compute.v:553$215 ($eq).
Removed top 1 bits (of 4) from port B of cell marlann_compute.$eq$compute.v:558$218 ($eq).
Removed top 2 bits (of 6) from port B of cell marlann_compute.$eq$compute.v:564$221 ($eq).
Removed top 2 bits (of 6) from port B of cell marlann_compute.$eq$compute.v:564$222 ($eq).
Removed top 15 bits (of 32) from mux cell marlann_compute.$ternary$compute.v:565$225 ($mux).
Removed top 15 bits (of 32) from port B of cell marlann_compute.$add$compute.v:565$226 ($add).
Removed top 15 bits (of 32) from port Y of cell marlann_compute.$add$compute.v:565$226 ($add).
Removed top 6 bits (of 8) from mux cell marlann_compute.$procmux$243 ($mux).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$298_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$298_CMP1 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$298_CMP2 ($eq).
Removed top 3 bits (of 6) from port B of cell marlann_compute.$procmux$312_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell marlann_compute.$procmux$335_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell marlann_compute.$procmux$355_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell marlann_compute.$procmux$372_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell marlann_compute.$procmux$372_CMP1 ($eq).
Removed top 3 bits (of 6) from port B of cell marlann_compute.$procmux$387_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell marlann_compute.$procmux$387_CMP1 ($eq).
Removed top 3 bits (of 6) from port B of cell marlann_compute.$procmux$387_CMP2 ($eq).
Removed top 2 bits (of 6) from port B of cell marlann_compute.$procmux$403_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell marlann_compute.$procmux$403_CMP1 ($eq).
Removed top 1 bits (of 10) from mux cell marlann_compute.$procmux$436 ($mux).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$453_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$459_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$459_CMP1 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$459_CMP2 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$459_CMP3 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$459_CMP4 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$459_CMP5 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$459_CMP6 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$459_CMP7 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$459_CMP8 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$461_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$461_CMP1 ($eq).
Removed top 1 bits (of 6) from port B of cell marlann_compute.$procmux$461_CMP2 ($eq).
Removed top 31 bits (of 32) from FF cell marlann_compute.$procdff$499 ($dff).
Removed top 64 bits (of 128) from FF cell marlann_compute.$procdff$502 ($dff).
Removed top 63 bits (of 128) from FF cell marlann_compute.$procdff$505 ($dff).
Removed top 1 bits (of 10) from FF cell marlann_compute.$procdff$525 ($dff).
Removed top 1 bits (of 10) from port A of cell marlann_compute.$and$compute.v:164$21 ($and).
Removed top 1 bits (of 10) from port A of cell marlann_compute.$or$compute.v:167$27 ($or).
Removed top 63 bits (of 64) from FF cell marlann_compute.$procdff$502 ($dff).
Removed top 64 bits (of 128) from wire marlann_compute.$0$memwr$\coeff_mem$compute.v:346$5_EN[127:0]$91.
Removed top 1 bits (of 10) from wire marlann_compute.$0\memlock_res[9:0].
Removed top 15 bits (of 32) from wire marlann_compute.$add$compute.v:258$63_Y.
Removed top 23 bits (of 32) from wire marlann_compute.$add$compute.v:311$84_Y.
Removed top 15 bits (of 32) from wire marlann_compute.$add$compute.v:356$115_Y.
Removed top 15 bits (of 32) from wire marlann_compute.$add$compute.v:565$226_Y.
Removed top 64 bits (of 128) from wire marlann_compute.$memwr$\coeff_mem$compute.v:346$5_EN.
Removed top 6 bits (of 8) from wire marlann_compute.$procmux$243_Y.
Removed top 64 bits (of 128) from wire marlann_compute.$procmux$334_Y.
Removed top 24 bits (of 32) from wire marlann_compute.$ternary$compute.v:514$195_Y.
Removed top 24 bits (of 32) from wire marlann_compute.$ternary$compute.v:519$199_Y.
Removed top 24 bits (of 32) from wire marlann_compute.$ternary$compute.v:565$225_Y.
Removed top 1 bits (of 10) from wire marlann_compute.memlock_res.
Removed top 8 bits (of 16) from port A of cell marlann_compute_mul2.$mul$compute.v:702$237 ($mul).
Removed top 8 bits (of 16) from port B of cell marlann_compute_mul2.$mul$compute.v:702$237 ($mul).
Removed top 8 bits (of 16) from port A of cell marlann_compute_mul2.$mul$compute.v:703$238 ($mul).
Removed top 8 bits (of 16) from port B of cell marlann_compute_mul2.$mul$compute.v:703$238 ($mul).

2.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\code_mem$compute.v:341$232' in module `\marlann_compute': merged $dff to cell.
Checking cell `$memwr$\coeff_mem$compute.v:346$233' in module `\marlann_compute': merged $dff to cell.
Checking cell `$memwr$\coeff_mem$compute.v:351$234' in module `\marlann_compute': merged $dff to cell.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \marlann_compute..
Finding unused cells or wires in module \marlann_compute_mul2..
Removed 9 unused cells and 22 unused wires.
<suppressed ~10 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\code_mem' in module `\marlann_compute':
  $memwr$\code_mem$compute.v:341$232 ($memwr)
  $memrd$\code_mem$compute.v:224$53 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\coeff_mem' in module `\marlann_compute':
  $memwr$\coeff_mem$compute.v:346$233 ($memwr)
  $memwr$\coeff_mem$compute.v:351$234 ($memwr)
  $memrd$\coeff_mem$compute.v:304$75 ($memrd)

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module marlann_compute.
Optimizing module marlann_compute_mul2.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\marlann_compute'.
Finding identical cells in module `\marlann_compute_mul2'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \marlann_compute..
Finding unused cells or wires in module \marlann_compute_mul2..

2.11.5. Finished fast OPT passes.

2.12. Printing statistics.

=== marlann_compute ===

   Number of wires:                321
   Number of wire bits:           5218
   Number of public wires:          87
   Number of public wire bits:    1977
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                353
     $add                           26
     $and                            7
     $assert                         2
     $assume                         1
     $dff                           49
     $eq                            57
     $gt                             9
     $logic_and                     15
     $logic_not                     12
     $logic_or                      14
     $mem                            2
     $mux                          115
     $ne                             1
     $not                            1
     $or                             3
     $pmux                           2
     $reduce_and                     2
     $reduce_bool                   10
     $reduce_or                     15
     $sshr                           2
     marlann_compute_mul2            8

=== marlann_compute_mul2 ===

   Number of wires:                 12
   Number of wire bits:            193
   Number of public wires:          10
   Number of public wire bits:     161
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $dff                            6
     $mul                            2

=== design hierarchy ===

   marlann_compute                   1
     marlann_compute_mul2            8

   Number of wires:                417
   Number of wire bits:           6762
   Number of public wires:         167
   Number of public wire bits:    3265
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                409
     $add                           26
     $and                            7
     $assert                         2
     $assume                         1
     $dff                           97
     $eq                            57
     $gt                             9
     $logic_and                     15
     $logic_not                     12
     $logic_or                      14
     $mem                            2
     $mul                           16
     $mux                          115
     $ne                             1
     $not                            1
     $or                             3
     $pmux                           2
     $reduce_and                     2
     $reduce_bool                   10
     $reduce_or                     15
     $sshr                           2

2.13. Executing CHECK pass (checking for obvious problems).
checking module marlann_compute..
checking module marlann_compute_mul2..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \marlann_compute..
Finding unused cells or wires in module \marlann_compute_mul2..

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module marlann_compute.
Optimizing module marlann_compute_mul2.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\marlann_compute'.
Finding identical cells in module `\marlann_compute_mul2'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \marlann_compute..
Finding unused cells or wires in module \marlann_compute_mul2..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

7.5. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module marlann_compute..
checking module marlann_compute_mul2..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \marlann_compute
Used module:     \marlann_compute_mul2

9.2. Analyzing design hierarchy..
Top module:  \marlann_compute
Used module:     \marlann_compute_mul2
Removed 0 unused modules.
Module marlann_compute directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: dc8ea3c369
CPU: user 0.45s system 0.00s, MEM: 51.89 MB total, 17.32 MB resident
Yosys 0.9+932 (git sha1 4072a966, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 28% 7x opt_clean (0 sec), 22% 3x check (0 sec), ...
